1. Object Destructuring
2. Concatenating two arrays together with both spread operator and with concat()
    const arr1=[1,2,3,4]
    const arr2=[5,6,7,8]

    //const arr3= arr1.concat(arr2);
    const arr3=[...arr1,...arr2]

    console.log(arr3);
    output: [1,2,3,4,5,6,7,8]

***Note- 
    1. JS is a single threaded synchronous language. It has only one colstack
    2. View Engine shows us the HTMl and CSS. THe actua APIs, JS functionality, and state Loading is handled by Web APIs.

3. Asynchronous Function-
    Functions/tasks/memory allocation are executed simultaneously together

4. Synchronous Function-
    Functions/tasks/memory allocation is read and executed in an orderly manner from top to bottom line-by-line

5. Execution of function occurs in 4 sections-
    a. colstack- this is where the execution occurs
    b. WebAPIs - medium used for making js/ function calls , waiting pt for functions to be executed 
    c. callback queue - order of execution is maintained in this 
    d. event loops - refreshes the colstack everytime to check if its empty or not. If empty,
                    callback queue is checked for any remaining function or memory calls

6. this keyword --> current context
                --> Alays points to an object
                --> this binding (where does it point to)
                    a. Default binding - points to window
                    b. Implicit
                    c. Explicit- makes this point to argument passed in the first parameter
                        i. apply(,[])- takes array and assigns it in the order of paramters displayed in the first place 
                        ii. bind()- It assigns which object will be changed by a particular function as another function then changes its value
                        iii. call(,) - takes single data or Destructured array as input and assigns it in the order of paramters displayed in the first place 
                    d. new () - creates en empty object and dills it data passed in a constructor function

7. Prototypes
    a. object {} -- used to achieve inheritance
    b. if person is name of constructor function then prototype is called through person.prototyoe
    c. __proto__ : dunder proto - holds the derivation of the prototype
    d. person.prototype === p1.__proto__  . THis shows that each created object from the constructor contains an accessible way to the the prototype 
    e. It helps in saving the memory used in creating new objects from the constructor function again and again


8. Lexical Environment= this Environment+ parent Environment
                        eg. f1{f2{f3{}}};

                        f3 env= f3+ f2 env
                        f2= f2+f1 env
                        f1= f1+ source env                        
